{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/sahirali/Tech-Stack/SYNTAX/postcode-map-visualisation/src/components/MapPage.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport MapView, { PROVIDER_GOOGLE, Marker } from \"react-native-maps\";\nimport { dataFetched, mapInitialise, updateFilter, zoomIn, updateSearchMap, zoomOut, handleTextChange, handleBtnDisable, handleInvalidSearch } from \"../actions\";\nimport InvalidSearchAlert from \"./InvalidSearchAlert\";\n\nvar MapPage = function MapPage() {\n  var centerZoomPoint = useSelector(function (state) {\n    return state.centerZoomPoint;\n  });\n  var fetched = useSelector(function (state) {\n    return state.fetched;\n  });\n  var dataHashMap = useSelector(function (state) {\n    return state.dataHashMap;\n  });\n  var filter = useSelector(function (state) {\n    return state.filter;\n  });\n  var searchPostcodeMap = useSelector(function (state) {\n    return state.searchPostcodeMap;\n  });\n  var searchText = useSelector(function (state) {\n    return state.searchText;\n  });\n  var buttonDisable = useSelector(function (state) {\n    return state.buttonDisable;\n  });\n  var invalidSearch = useSelector(function (state) {\n    return state.invalidSearch;\n  });\n  var dispatch = useDispatch();\n  console.log(\"----------------------------------------------\");\n  useEffect(function () {\n    if (!fetched && !dataHashMap) {\n      var dataMap = new Map([[\"N\", []], [\"NW\", []], [\"SW\", []], [\"SE\", []], [\"E\", []], [\"EC\", []], [\"W\", []], [\"WC\", []]]);\n      var mapSearch = new Map([[\"N\", null], [\"NW\", null], [\"SW\", null], [\"SE\", null], [\"E\", null], [\"EC\", null], [\"W\", null], [\"WC\", null]]);\n      fetch(\"https://raw.githubusercontent.com/sjwhitworth/london_geojson/master/london_postcodes.json\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        for (var index in data.features) {\n          var postcodeInfo = data.features[index];\n          var name = postcodeInfo.properties[\"Name\"];\n          var arrayOfLocations = [];\n          var coordinates = postcodeInfo.geometry.coordinates[0];\n\n          for (var _index in coordinates) {\n            var coord = coordinates[_index];\n            arrayOfLocations.push({\n              latitude: parseFloat(coord[1]),\n              longitude: parseFloat(coord[0])\n            });\n            break;\n          }\n\n          var postcodeMarkerObj = {\n            coords: arrayOfLocations,\n            title: postcodeInfo.properties[\"Name\"],\n            description: postcodeInfo.properties[\"Description\"],\n            pinColor: \"dodgerblue\"\n          };\n          var mapKey = \"\";\n\n          if (name[1] == \"E\" || name[1] == \"W\" || name[1] == \"C\") {\n            mapKey = name.substring(0, 2);\n          } else {\n            mapKey = name.substring(0, 1);\n          }\n\n          dataMap.set(mapKey, [].concat(_toConsumableArray(dataMap.get(mapKey)), [postcodeMarkerObj]));\n\n          if (!mapSearch.get(mapKey)) {\n            mapSearch.set(mapKey, new Map([[postcodeInfo.properties[\"Name\"], arrayOfLocations[0]]]));\n          } else {\n            var updatedMap = new Map([].concat(_toConsumableArray(mapSearch.get(mapKey)), [[postcodeInfo.properties[\"Name\"], arrayOfLocations[0]]]));\n            mapSearch.set(mapKey, updatedMap);\n          }\n        }\n\n        dispatch(mapInitialise(dataMap));\n        dispatch(updateSearchMap(mapSearch));\n        console.log(mapSearch);\n        console.log(searchPostcodeMap);\n        dispatch(dataFetched());\n      });\n    }\n  }, []);\n\n  var handleLocationZoom = function handleLocationZoom(markerCoords, zoomInBySearch) {\n    if (zoomInBySearch) {\n      dispatch(zoomIn(_objectSpread(_objectSpread({}, markerCoords), {}, {\n        latitudeDelta: 0.05,\n        longitudeDelta: 0.0121\n      })));\n    } else {\n      dispatch(zoomIn(_objectSpread(_objectSpread({}, markerCoords), {}, {\n        latitudeDelta: 0.15,\n        longitudeDelta: 0.1121\n      })));\n    }\n  };\n\n  var handleResetZoom = function handleResetZoom() {\n    console.log(\"Zooming Out\");\n    dispatch(zoomOut());\n    console.log(centerZoomPoint);\n  };\n\n  var searchTextChange = function searchTextChange(text) {\n    dispatch(handleTextChange(text));\n\n    if (text && buttonDisable) {\n      dispatch(handleBtnDisable(false));\n    } else if (!text) {\n      dispatch(handleBtnDisable(true));\n    }\n  };\n\n  var handlePostcodeSearch = function handlePostcodeSearch() {\n    var _searchPostcodeMap$ge;\n\n    var mapKey = null;\n\n    if (searchText[1] == \"E\" || searchText[1] == \"W\" || searchText[1] == \"C\") {\n      mapKey = searchText.substring(0, 2);\n    } else if (searchText[0] == \"N\" || searchText[0] == \"E\" || searchText[0] == \"W\") {\n      mapKey = searchText.substring(0, 1);\n    } else {\n      submitBtnReset(true);\n      console.log(\"Not Valid Postcode\");\n      return;\n    }\n\n    if (searchPostcodeMap != null && (_searchPostcodeMap$ge = searchPostcodeMap.get(mapKey)) != null && _searchPostcodeMap$ge.has(searchText)) {\n      var _searchPostcodeMap$ge2;\n\n      handleLocationZoom(searchPostcodeMap == null ? void 0 : (_searchPostcodeMap$ge2 = searchPostcodeMap.get(mapKey)) == null ? void 0 : _searchPostcodeMap$ge2.get(searchText), true);\n      submitBtnReset(false);\n    } else {\n      submitBtnReset(true);\n      console.log(\"Not Valid Postcode in Map\");\n      return;\n    }\n  };\n\n  var submitBtnReset = function submitBtnReset(searchInvalid) {\n    dispatch(handleTextChange(\"\"));\n    dispatch(handleBtnDisable(true));\n\n    if (searchInvalid) {\n      dispatch(handleInvalidSearch(true));\n    }\n  };\n\n  if (!fetched || !dataHashMap) {\n    return React.createElement(View, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, filter ? filter : \"No Filter Applied\"), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }\n    }, fetched ? fetched : \"Still Fetching...\"), React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }, dataHashMap ? \"Map initialised\" : \"Not initialised\"));\n  } else {\n    var areaKeys = Array.from(dataHashMap.keys());\n    var areaSpecificData = null;\n\n    if (filter) {\n      areaSpecificData = dataHashMap.get(filter);\n    }\n\n    return React.createElement(SafeAreaView, {\n      style: styles.container,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }\n    }, \"Map Page\"), React.createElement(View, {\n      style: styles.separator,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }), React.createElement(View, {\n      style: styles.searchContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }\n    }, React.createElement(TextInput, {\n      style: styles.searchText,\n      placeholder: \"Enter a Postcode to Search Map\",\n      placeholderTextColor: \"grey\",\n      onChangeText: searchTextChange,\n      value: searchText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    }), React.createElement(View, {\n      style: {\n        height: -5,\n        marginTop: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }\n    }, React.createElement(Button, {\n      title: \"Submit Search\",\n      onPress: handlePostcodeSearch,\n      disabled: buttonDisable,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }))), invalidSearch ? React.createElement(InvalidSearchAlert, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 26\n      }\n    }) : null, React.createElement(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }\n    }, filter ? \"Map currently is filtered by Area: \" + filter : \"Map currently has no filter applied\"), React.createElement(TouchableOpacity, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }\n    }, React.createElement(View, {\n      style: styles.btnContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, !filter ? React.createElement(Button, {\n      title: \"Reset Map Filter\",\n      onPress: function onPress() {\n        return dispatch(updateFilter(null));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }\n    }) : null, centerZoomPoint.latitudeDelta == 0.55 ? React.createElement(Button, {\n      title: \"Reset Zoom\",\n      onPress: function onPress() {\n        return dispatch(zoomOut());\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 15\n      }\n    }) : null)), React.createElement(View, {\n      style: styles.mapContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }\n    }, React.createElement(MapView, {\n      provider: PROVIDER_GOOGLE,\n      style: styles.map,\n      region: centerZoomPoint,\n      zoomEnabled: true,\n      zoomTapEnabled: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, areaSpecificData ? areaSpecificData.map(function (postcodeObj) {\n      return postcodeObj.coords.map(function (markerCoords, index) {\n        return React.createElement(Marker, {\n          key: postcodeObj.title + index,\n          coordinate: markerCoords,\n          title: postcodeObj.title,\n          description: postcodeObj.description,\n          pinColor: postcodeObj.pinColor,\n          onPress: function onPress() {\n            return handleLocationZoom(markerCoords, false);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 23\n          }\n        });\n      });\n    }) : areaKeys.map(function (area) {\n      var _dataHashMap$get;\n\n      return (_dataHashMap$get = dataHashMap.get(area)) == null ? void 0 : _dataHashMap$get.map(function (postcodeObj) {\n        return postcodeObj.coords.map(function (markerCoords, index) {\n          return React.createElement(Marker, {\n            key: postcodeObj.title + index,\n            coordinate: markerCoords,\n            title: postcodeObj.title,\n            description: postcodeObj.description,\n            pinColor: postcodeObj.pinColor,\n            onPress: function onPress() {\n              return handleLocationZoom(markerCoords, false);\n            },\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 25\n            }\n          });\n        });\n      });\n    }))));\n  }\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n    width: \"100%\",\n    backgroundColor: \"#fff\",\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n    backgroundColor: \"blue\"\n  },\n  searchContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-evenly\",\n    marginBottom: 20\n  },\n  searchText: {\n    height: 45,\n    borderColor: \"dodgerblue\",\n    borderBottomWidth: 1\n  },\n  btnContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    paddingVertical: 20\n  },\n  mapContainer: {\n    height: 400,\n    width: \"100%\"\n  },\n  map: {\n    flex: 1\n  }\n});\nexport default MapPage;","map":{"version":3,"sources":["/Users/sahirali/Tech-Stack/SYNTAX/postcode-map-visualisation/src/components/MapPage.tsx"],"names":["React","useEffect","TouchableOpacity","useSelector","useDispatch","MapView","PROVIDER_GOOGLE","Marker","dataFetched","mapInitialise","updateFilter","zoomIn","updateSearchMap","zoomOut","handleTextChange","handleBtnDisable","handleInvalidSearch","InvalidSearchAlert","MapPage","centerZoomPoint","state","fetched","dataHashMap","filter","searchPostcodeMap","searchText","buttonDisable","invalidSearch","dispatch","console","log","dataMap","Map","mapSearch","fetch","then","response","json","data","index","features","postcodeInfo","name","properties","arrayOfLocations","coordinates","geometry","coord","push","latitude","parseFloat","longitude","postcodeMarkerObj","coords","title","description","pinColor","mapKey","substring","set","get","updatedMap","handleLocationZoom","markerCoords","zoomInBySearch","latitudeDelta","longitudeDelta","handleResetZoom","searchTextChange","text","handlePostcodeSearch","submitBtnReset","has","searchInvalid","styles","container","areaKeys","Array","from","keys","areaSpecificData","separator","searchContainer","height","marginTop","btnContainer","mapContainer","map","postcodeObj","area","StyleSheet","create","width","backgroundColor","flex","flexDirection","justifyContent","alignItems","marginVertical","display","flexWrap","marginBottom","borderColor","borderBottomWidth","paddingVertical"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Button,\n  TextInput,\n  SafeAreaView,\n} from \"react-native\";\nimport { TouchableOpacity } from \"react-native-gesture-handler\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../reducers\";\nimport MapView, { PROVIDER_GOOGLE, Marker } from \"react-native-maps\";\nimport {\n  MapDataType,\n  LatLng,\n  PostcodeMarkerData,\n  CenterPointZoom,\n  SearchMap,\n} from \"../types\";\nimport {\n  dataFetched,\n  mapInitialise,\n  updateFilter,\n  zoomIn,\n  updateSearchMap,\n  zoomOut,\n  handleTextChange,\n  handleBtnDisable,\n  handleInvalidSearch,\n} from \"../actions\";\nimport InvalidSearchAlert from \"./InvalidSearchAlert\";\n\nconst MapPage = () => {\n  const centerZoomPoint: CenterPointZoom = useSelector(\n    (state: RootState) => state.centerZoomPoint\n  );\n  const fetched: boolean = useSelector((state: RootState) => state.fetched);\n  const dataHashMap: MapDataType = useSelector(\n    (state: RootState) => state.dataHashMap\n  );\n  const filter: string | null = useSelector((state: RootState) => state.filter);\n  const searchPostcodeMap: SearchMap | null = useSelector(\n    (state: RootState) => state.searchPostcodeMap\n  );\n  const searchText: string = useSelector(\n    (state: RootState) => state.searchText\n  );\n  const buttonDisable: boolean = useSelector(\n    (state: RootState) => state.buttonDisable\n  );\n  const invalidSearch: boolean = useSelector(\n    (state: RootState) => state.invalidSearch\n  );\n  const dispatch = useDispatch();\n\n  console.log(\"----------------------------------------------\");\n\n  useEffect(() => {\n    if (!fetched && !dataHashMap) {\n      const dataMap: MapDataType = new Map([\n        [\"N\", []],\n        [\"NW\", []],\n        [\"SW\", []],\n        [\"SE\", []],\n        [\"E\", []],\n        [\"EC\", []],\n        [\"W\", []],\n        [\"WC\", []],\n      ]);\n\n      const mapSearch: SearchMap = new Map([\n        [\"N\", null],\n        [\"NW\", null],\n        [\"SW\", null],\n        [\"SE\", null],\n        [\"E\", null],\n        [\"EC\", null],\n        [\"W\", null],\n        [\"WC\", null],\n      ]);\n\n      fetch(\n        \"https://raw.githubusercontent.com/sjwhitworth/london_geojson/master/london_postcodes.json\"\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          for (let index in data.features) {\n            let postcodeInfo = data.features[index];\n            let name: string = postcodeInfo.properties[\"Name\"];\n            let arrayOfLocations: LatLng[] = [];\n            let coordinates = postcodeInfo.geometry.coordinates[0];\n\n            for (let index in coordinates) {\n              let coord = coordinates[index];\n              arrayOfLocations.push({\n                latitude: parseFloat(coord[1]),\n                longitude: parseFloat(coord[0]),\n              });\n              // break added as every single location is unecessary & makes app slower\n              break; // Comment this line to see markers for every single location in every single postcode in London\n            }\n\n            let postcodeMarkerObj: PostcodeMarkerData = {\n              coords: arrayOfLocations,\n              title: postcodeInfo.properties[\"Name\"],\n              description: postcodeInfo.properties[\"Description\"],\n              pinColor: \"dodgerblue\",\n            };\n\n            let mapKey = \"\";\n\n            if (name[1] == \"E\" || name[1] == \"W\" || name[1] == \"C\") {\n              mapKey = name.substring(0, 2);\n            } else {\n              mapKey = name.substring(0, 1);\n            }\n\n            dataMap.set(mapKey, [...dataMap.get(mapKey)!, postcodeMarkerObj]);\n\n            if (!mapSearch.get(mapKey)) {\n              mapSearch.set(\n                mapKey,\n                new Map([\n                  [postcodeInfo.properties[\"Name\"], arrayOfLocations[0]],\n                ])\n              );\n            } else {\n              const updatedMap: Map<string, LatLng> = new Map([\n                ...mapSearch.get(mapKey)!,\n                [postcodeInfo.properties[\"Name\"], arrayOfLocations[0]],\n              ]);\n\n              mapSearch.set(mapKey, updatedMap);\n            }\n          }\n\n          dispatch(mapInitialise(dataMap));\n          dispatch(updateSearchMap(mapSearch));\n          console.log(mapSearch);\n          console.log(searchPostcodeMap);\n          // dispatch(\n          //   zoomIn({\n          //     latitude: 51.507351,\n          //     longitude: -0.127758,\n          //     latitudeDelta: 0.55,\n          //     longitudeDelta: 0.5121,\n          //   })\n          // );\n          dispatch(dataFetched());\n        });\n      // dispatch(dataFetched());\n    }\n  }, []);\n\n  const handleLocationZoom = (\n    markerCoords: LatLng,\n    zoomInBySearch: boolean\n  ) => {\n    if (zoomInBySearch) {\n      dispatch(\n        zoomIn({\n          ...markerCoords!,\n          latitudeDelta: 0.05,\n          longitudeDelta: 0.0121,\n        })\n      );\n    } else {\n      dispatch(\n        zoomIn({\n          ...markerCoords!,\n          latitudeDelta: 0.15,\n          longitudeDelta: 0.1121,\n        })\n      );\n    }\n  };\n\n  const handleResetZoom = () => {\n    console.log(\"Zooming Out\");\n    dispatch(zoomOut());\n    console.log(centerZoomPoint);\n  };\n\n  const searchTextChange = (text: string) => {\n    dispatch(handleTextChange(text));\n\n    if (text && buttonDisable) {\n      dispatch(handleBtnDisable(false));\n    } else if (!text) {\n      dispatch(handleBtnDisable(true));\n    }\n  };\n\n  const handlePostcodeSearch = () => {\n    let mapKey: string | null = null;\n\n    if (searchText[1] == \"E\" || searchText[1] == \"W\" || searchText[1] == \"C\") {\n      mapKey = searchText.substring(0, 2);\n    } else if (\n      searchText[0] == \"N\" ||\n      searchText[0] == \"E\" ||\n      searchText[0] == \"W\"\n    ) {\n      mapKey = searchText.substring(0, 1);\n    } else {\n      // Display some Alert text\n      submitBtnReset(true);\n      console.log(\"Not Valid Postcode\");\n      return;\n    }\n\n    if (searchPostcodeMap?.get(mapKey)?.has(searchText)!) {\n      handleLocationZoom(\n        searchPostcodeMap?.get(mapKey)?.get(searchText)!,\n        true\n      );\n      submitBtnReset(false);\n    } else {\n      submitBtnReset(true);\n      console.log(\"Not Valid Postcode in Map\");\n      return;\n    }\n  };\n\n  const submitBtnReset = (searchInvalid: boolean) => {\n    dispatch(handleTextChange(\"\"));\n    dispatch(handleBtnDisable(true));\n    if (searchInvalid) {\n      dispatch(handleInvalidSearch(true));\n    }\n  };\n\n  if (!fetched || !dataHashMap) {\n    return (\n      <View style={styles.container}>\n        {/* <Text>Data being fetched...</Text> */}\n        <Text>{filter ? filter : \"No Filter Applied\"}</Text>\n        <Text>{fetched ? fetched : \"Still Fetching...\"}</Text>\n        <Text>{dataHashMap ? \"Map initialised\" : \"Not initialised\"}</Text>\n      </View>\n    );\n  } else {\n    const areaKeys = Array.from(dataHashMap.keys());\n    let areaSpecificData: PostcodeMarkerData[] | null = null;\n\n    if (filter) {\n      areaSpecificData = dataHashMap.get(filter)!;\n    }\n\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text>Map Page</Text>\n        <View style={styles.separator} />\n        {/* <Text>{searchText}</Text>\n        <Text>{buttonDisable ? \"Button Disabled\" : \"Button not Disabled\"}</Text> */}\n        <View style={styles.searchContainer}>\n          <TextInput\n            style={styles.searchText}\n            placeholder=\"Enter a Postcode to Search Map\"\n            placeholderTextColor=\"grey\"\n            onChangeText={searchTextChange}\n            value={searchText}\n          />\n          <View style={{ height: -5, marginTop: 10 }}>\n            <Button\n              title=\"Submit Search\"\n              onPress={handlePostcodeSearch}\n              disabled={buttonDisable}\n            />\n          </View>\n        </View>\n        {invalidSearch ? <InvalidSearchAlert /> : null}\n        <Text>\n          {filter\n            ? \"Map currently is filtered by Area: \" + filter\n            : \"Map currently has no filter applied\"}\n        </Text>\n        <TouchableOpacity>\n          <View style={styles.btnContainer}>\n            {!filter ? (\n              <Button\n                title=\"Reset Map Filter\"\n                onPress={() => dispatch(updateFilter(null))}\n              />\n            ) : null}\n            {centerZoomPoint.latitudeDelta == 0.55 ? (\n              <Button title=\"Reset Zoom\" onPress={() => dispatch(zoomOut())} />\n            ) : null}\n          </View>\n        </TouchableOpacity>\n        {/* Search Bar goes here.. */}\n        <View style={styles.mapContainer}>\n          <MapView\n            provider={PROVIDER_GOOGLE}\n            style={styles.map}\n            region={centerZoomPoint}\n            zoomEnabled\n            zoomTapEnabled\n          >\n            {/* Display Markers */}\n            {areaSpecificData\n              ? areaSpecificData!.map((postcodeObj) => {\n                  return postcodeObj.coords.map((markerCoords, index) => {\n                    return (\n                      <Marker\n                        key={postcodeObj.title + index}\n                        coordinate={markerCoords}\n                        title={postcodeObj.title}\n                        description={postcodeObj.description}\n                        pinColor={postcodeObj.pinColor}\n                        onPress={() => handleLocationZoom(markerCoords, false)}\n                      />\n                    );\n                  });\n                })\n              : areaKeys.map((area) => {\n                  return dataHashMap.get(area)?.map((postcodeObj) => {\n                    return postcodeObj.coords.map((markerCoords, index) => {\n                      return (\n                        <Marker\n                          key={postcodeObj.title + index}\n                          coordinate={markerCoords}\n                          title={postcodeObj.title}\n                          description={postcodeObj.description}\n                          pinColor={postcodeObj.pinColor}\n                          onPress={() =>\n                            handleLocationZoom(markerCoords, false)\n                          }\n                        />\n                      );\n                    });\n                  });\n                })}\n          </MapView>\n        </View>\n      </SafeAreaView>\n    );\n  }\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: \"100%\",\n    width: \"100%\",\n    backgroundColor: \"#fff\",\n    flex: 1,\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    // alignContent: \"space-around\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n    backgroundColor: \"blue\",\n  },\n  searchContainer: {\n    width: \"100%\",\n    // backgroundColor: \"yellow\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-evenly\",\n    marginBottom: 20,\n  },\n  searchText: {\n    height: 45,\n    borderColor: \"dodgerblue\",\n    borderBottomWidth: 1,\n    // marginBottom: 20,\n  },\n  btnContainer: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"space-evenly\",\n    // marginBottom: 20,\n    paddingVertical: 20,\n  },\n  mapContainer: {\n    // flex: 1,\n    height: 400,\n    width: \"100%\",\n  },\n  map: {\n    // ...StyleSheet.absoluteFillObject,\n    flex: 1,\n  },\n});\n\nexport default MapPage;\n"]},"metadata":{},"sourceType":"module"}