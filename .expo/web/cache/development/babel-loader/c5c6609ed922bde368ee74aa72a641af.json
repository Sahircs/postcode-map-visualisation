{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/sahirali/Tech-Stack/SYNTAX/postcode-map-visualisation/src/components/Chart.tsx\";\n\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { updateFilter, dataFetched } from \"../actions\";\nimport { LineChart } from \"react-native-chart-kit\";\n\nvar ScatterChart = function ScatterChart(_ref) {\n  var postcodeMapData = _ref.postcodeMapData,\n      dispatch = _ref.dispatch;\n  var areaLabels = [];\n  var numOfPostcodesByArea = [];\n  var areaKeys = Array.from(postcodeMapData.keys());\n  areaKeys.map(function (area) {\n    var _postcodeMapData$get;\n\n    areaLabels.push(area);\n    numOfPostcodesByArea.push(postcodeMapData == null ? void 0 : (_postcodeMapData$get = postcodeMapData.get(area)) == null ? void 0 : _postcodeMapData$get.length);\n  });\n  var mapData = {\n    labels: areaLabels,\n    datasets: [{\n      data: numOfPostcodesByArea\n    }],\n    legend: [\"Scatter Chart for Postcode distribution by Area\"]\n  };\n  var chartConfig = {\n    backgroundGradientFrom: \"#1E2923\",\n    backgroundGradientFromOpacity: 0.15,\n    backgroundGradientTo: \"#08130D\",\n    backgroundGradientToOpacity: 0.5,\n    color: function color() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return \"rgba(26, 255, 146, \" + opacity + \")\";\n    },\n    barPercentage: 0.5\n  };\n\n  var handleDataPointClicked = function handleDataPointClicked(data) {\n    dispatch(updateFilter(areaLabels[data.index]));\n    dispatch(dataFetched());\n  };\n\n  return React.createElement(LineChart, {\n    data: mapData,\n    width: Dimensions.get(\"window\").width,\n    height: 220,\n    chartConfig: chartConfig,\n    style: {\n      marginVertical: 8,\n      borderRadius: 16\n    },\n    onDataPointClick: handleDataPointClicked,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  });\n};\n\nvar Chart = function Chart() {\n  var fetched = useSelector(function (state) {\n    return state.fetched;\n  });\n  var dataHashMap = useSelector(function (state) {\n    return state.dataHashMap;\n  });\n  var filter = useSelector(function (state) {\n    return state.filter;\n  });\n  var dispatch = useDispatch();\n  return React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Chart Page\"), React.createElement(View, {\n    style: styles.separator,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, \"Click on a datapoint to filter the Map by that Area\"), !fetched ? React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"Loading Data...\") : React.createElement(ScatterChart, {\n    postcodeMapData: dataHashMap,\n    dispatch: dispatch,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, filter ? \"Map currently is filtered by Area: \" + filter : \"Map currently has no filter applied\"));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n    backgroundColor: \"blue\"\n  }\n});\nexport default Chart;","map":{"version":3,"sources":["/Users/sahirali/Tech-Stack/SYNTAX/postcode-map-visualisation/src/components/Chart.tsx"],"names":["React","useSelector","useDispatch","updateFilter","dataFetched","LineChart","ScatterChart","postcodeMapData","dispatch","areaLabels","numOfPostcodesByArea","areaKeys","Array","from","keys","map","area","push","get","length","mapData","labels","datasets","data","legend","chartConfig","backgroundGradientFrom","backgroundGradientFromOpacity","backgroundGradientTo","backgroundGradientToOpacity","color","opacity","barPercentage","handleDataPointClicked","index","Dimensions","width","marginVertical","borderRadius","Chart","fetched","state","dataHashMap","filter","styles","container","separator","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","height"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, Text, StyleSheet, Dimensions } from \"react-native\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../reducers\";\nimport { updateFilter, dataFetched } from \"../actions\";\nimport { LineChart } from \"react-native-chart-kit\";\nimport { MapDataType } from \"../types\";\nimport { Dispatch } from \"redux\";\nimport { Dataset } from \"react-native-chart-kit/dist/HelperTypes\";\n\ninterface Props {\n  postcodeMapData: MapDataType;\n  dispatch: Dispatch<any>;\n}\n\ninterface DataPoint {\n  index: number;\n  value: number;\n  dataset: Dataset;\n  x: number;\n  y: number;\n  getColor: (opacity: number) => string;\n}\n\nconst ScatterChart = ({ postcodeMapData, dispatch }: Props) => {\n  const areaLabels: string[] = [];\n  const numOfPostcodesByArea: number[] = [];\n\n  const areaKeys = Array.from(postcodeMapData!.keys());\n\n  areaKeys.map((area) => {\n    areaLabels.push(area);\n    numOfPostcodesByArea.push(postcodeMapData?.get(area)?.length!);\n  });\n\n  const mapData = {\n    labels: areaLabels,\n    datasets: [\n      {\n        data: numOfPostcodesByArea,\n      },\n    ],\n    legend: [\"Scatter Chart for Postcode distribution by Area\"],\n  };\n\n  const chartConfig = {\n    backgroundGradientFrom: \"#1E2923\",\n    backgroundGradientFromOpacity: 0.15,\n    backgroundGradientTo: \"#08130D\",\n    backgroundGradientToOpacity: 0.5,\n    color: (opacity = 1) => `rgba(26, 255, 146, ${opacity})`,\n    barPercentage: 0.5,\n  };\n\n  const handleDataPointClicked = (data: DataPoint) => {\n    dispatch(updateFilter(areaLabels[data.index]));\n    dispatch(dataFetched());\n  };\n\n  return (\n    <LineChart\n      data={mapData}\n      width={Dimensions.get(\"window\").width}\n      height={220}\n      chartConfig={chartConfig}\n      style={{\n        marginVertical: 8,\n        borderRadius: 16,\n      }}\n      onDataPointClick={handleDataPointClicked}\n    />\n  );\n};\n\nconst Chart = () => {\n  const fetched: boolean = useSelector((state: RootState) => state.fetched);\n  const dataHashMap: MapDataType = useSelector(\n    (state: RootState) => state.dataHashMap\n  );\n  const filter: string = useSelector((state: RootState) => state.filter);\n  const dispatch = useDispatch();\n\n  return (\n    <View style={styles.container}>\n      <Text>Chart Page</Text>\n      <View style={styles.separator} />\n      <Text>Click on a datapoint to filter the Map by that Area</Text>\n      {!fetched ? (\n        <Text>Loading Data...</Text>\n      ) : (\n        <ScatterChart postcodeMapData={dataHashMap} dispatch={dispatch} />\n      )}\n      <Text>\n        {filter\n          ? \"Map currently is filtered by Area: \" + filter\n          : \"Map currently has no filter applied\"}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: \"80%\",\n    backgroundColor: \"blue\",\n  },\n});\n\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}